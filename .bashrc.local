[[ -r $rvm_path/scripts/completion ]] && source $rvm_path/scripts/completion
if [[ -s "$HOME/.rvm/scripts/rvm" ]] ; then source "$HOME/.rvm/scripts/rvm" ; fi
export PATH=$PATH:./node_modules/.bin:/usr/local/share/npm/bin:$WORKSPACE_DIR/dotfiles/bin

# python crap
export WORKON_HOME=$HOME/.virtualenvs
export PIP_VIRTUALENV_BASE=$WORKON_HOME
export PIP_RESPECT_VIRTUALENV=true

r () {
  local SCRIPT_NAME=$1
  shift
  if [[ -f script/$SCRIPT_NAME ]]; then
    script/$SCRIPT_NAME $@
  else
    echo "No script at script/$SCRIPT_NAME"
  fi
}
complete -o default -W "\$(ls script)" r

alias srvm="source .rvmrc"
alias gsp="git stash pop"
alias gs="git stash"
alias gpl="git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
alias grpe=grep
alias grep='grep --color=auto'
alias igrep="grep -i"
alias lgrep="grep --line-buffered"
alias lr='ls -lrta'
alias rdm="rake db:migrate"
alias rdr="rake db:rollback"
alias gphm="git push heroku master"
alias gac='gc --amend -Chead'
alias reload="source ~/.bash_profile"
alias rjw="rake jobs:work"
alias d="script/dev"
alias hcurl='curl -n -H "Accept: application/vnd.heroku+json; version=3"'

alias flushdns="sudo discoveryutil mdnsflushcache"

# pushes a new branch to origin, sets it up to track
# the remote
gpnb() {
  if [ -n "$(git rev-parse --git-dir 2>/dev/null)" ]; then
    local b="$(git symbolic-ref HEAD 2>/dev/null)"
    if [ -n "$b" ]; then
      local branch="${b##refs/heads/}"
      if [ "$branch" == "master" ]; then
        echo "Current branch is master...nothing to do."
      else
        t="$(git config branch.$branch.remote 2>/dev/null)"
        if [ -n "$t" ]; then
          echo "Branch $branch already set up to track remote \"$t\" ...nothing to do"
        else
          echo "Pushing $branch to origin and setting it up to track remote"
          local cmd="git push -u origin $branch"
          $cmd
        fi
      fi
    else
      echo "Unable to determine current branch; the git repo may be in a bad state"
      exit 1
    fi
  else
    echo "Not in a git dir...exiting."
  fi
}

getpull() {
  if [ -z "$1" ]; then
    echo "Usage: getpull <SHA>"
  elif [ -z "$(git rev-parse --git-dir 2>/dev/null)" ]; then
    echo "Not in a git directory"
  else
    local origin_url=$(git config --get remote.origin.url)
    local pull_base_url=$(ruby -e "print \"https://github.com/\" + \"$origin_url\"[/:(.+)?\.git$/, 1] + \"/pull\"")
    local pull_id=$(git log $1..master --ancestry-path --merges --oneline | grep -oP "#\d+" | tail -n 1 | grep -oP '\d+')

    if [ -n "$pull_id" ]; then
      echo "$pull_base_url/$pull_id"
    else
      echo "Sorry, couldn't find that pull"
    fi
  fi
}

complete -o default -W "\$(git branch 2>/dev/null | cut -c 3-)" git gco

restart_memcached() {
  ps -ef | grep memcached | grep -v grep | awk '{print $2}' | xargs -I {} kill -9 {}
  memcached -d -m 1024
}

if [[ -f ~/.secret_env.rc ]]; then
  . ~/.secret_env.rc
fi

if [[ $(ps -o comm= -p $PPID) != *sh ]]; then
  shopt -s histappend
  export PROMPT_COMMAND="$( [ '$PROMPT_COMMAND' ] && echo $PROMPT_COMMAND; )history -a; history -n"
fi

export ANDROID_HOME=/usr/local/opt/android-sdk
