if ENV.include?('RAILS_ENV') && !Object.const_defined?('RAILS_DEFAULT_LOGGER')
  require 'logger'
  RAILS_DEFAULT_LOGGER = Logger.new(STDOUT)
end

after_rails_loaded = lambda do |*args|
  app_reference = defined?(app) && app
  if defined?(Delayed::Job)
    DJ = Delayed::Job
    DJ.class_eval do
      def run; run_with_lock(1, 1); end

      class << self
        def method_histogram
          all.map(&:payload_object).map(&:method).to_ordered_histogram
        end

        def dump
          all.map(&:payload_object)
        end

        def creation_summary
          find_by_sql(<<-SQL).inject([]) { |ary, j| ary << OpenStruct.new(j.attributes); ary }
            SELECT regexp_matches(handler, E'method: :(.*?)\n') as method,
                   to_char(created_at, 'YYYY/MM/DD HH24') as created_hour,
                   count(*) as count
            FROM delayed_jobs GROUP BY created_hour, method
            ORDER BY created_hour DESC, count(*) DESC
          SQL
        end
      end
    end
  end

  if defined? Rails
    ActiveRecord::Base.logger = Logger.new(STDOUT)
  end

  if defined? ActiveRecord::Base
    ActiveRecord::Base.class_eval do
      define_method(:navigate) do |*args|
        base_url = args.first || 'http://localhost:3000'

        if respond_to? :path
          object_path = path
        elsif app_reference.respond_to?("#{self.class.name.downcase}_path")
          object_path = app_reference.send("#{self.class.name.downcase}_path", self)
        else
          object_path = app_reference.url_for(self).sub(/^https?:\/\/[^\/]+/,'')
        end
        system('open', "#{base_url + object_path}")
      end
    end

    clazz = User rescue nil # rails auto-loading
    if clazz && User.respond_to?(:find_by_login)
      def andrew; User.find_by_login('awarner'); end
      alias :me :andrew
    end
  end

  TMail::Mail rescue nil # make sure constant gets autoloaded by rails if necessary
  if defined?(TMail::Mail)
    TMail::Mail.class_eval do
      def show
        emails_dir = "#{Rails.root}/tmp/emails"
        raise "You must first create the tmp/emails directory!" if !File.directory?(emails_dir)

        mail_path = File.join(emails_dir, "#{object_id}.html")

        File.open(mail_path, "w") do |f|
          f.puts '<meta http-equiv="Content-type" content="text/html; charset=utf-8"></meta>'
          f.puts "<pre>"
            f.puts "From: #{from.to_sentence}"
            f.puts "Subject: #{subject}"
            f.puts "Date: #{date}"
            f.puts "To: #{to.to_sentence}"
            [:cc, :bcc, :reply_to].each do |optional_recipients|
              if send(optional_recipients)
                f.puts "#{optional_recipients.to_s.humanize}: #{reply_to.to_sentence}"
              end
            end
          f.puts "</pre>"
          f.puts self.body
        end
        system("open", "file:///#{mail_path}")
      end
    end
  end
end

if Object.const_defined?('IRB')
  IRB.conf[:IRB_RC] = after_rails_loaded
else
  after_rails_loaded.call
end

def benchmark(&block)
  require 'benchmark'
  Benchmark.bm {|x| x.report(&block) }
end

def show_log
  change_log(STDOUT)
end

def hide_log
  change_log(nil)
end

def change_log(stream, colorize=true)
  ActiveRecord::Base.logger = ::Logger.new(stream)
  ActiveRecord::Base.clear_all_connections!
  ActiveRecord::Base.colorize_logging = colorize
end

class String
  def clip
    self.tap do
      `echo "#{self}" | pbcopy`
    end
  end
end

def add_debugger(clazz, method)
  debugger_method = binding.respond_to?(:pry) ? 'binding.pry' : 'debugger'

  unless clazz.method_defined? "#{method}_with_debugger"
    clazz.class_eval <<-CODE, __FILE__, __LINE__ + 1
      def #{method}_with_debugger(*args, &block)
        #{debugger_method}
        #{method}_without_debugger(*args, &block)
      end
      alias_method_chain :#{method}, :debugger
    CODE
  end
end

def remove_debugger(clazz, method)
  return unless clazz.method_defined? "#{method}_with_debugger"

  clazz.class_eval do
    alias_method method, "#{method}_without_debugger"
    undef_method "#{method}_with_debugger"
    undef_method "#{method}_without_debugger"
  end
end

def debug_sql_calls(clazz, method = :find_by_sql)
  add_debugger(class << clazz; self; end, :find_by_sql)
end

def benchmark_url(url, attempts = 100)
  require 'benchmark'
  require 'net/http'
  total = 0.0
  attempts.times do |i|
    doc = nil
    actual_time = (Benchmark.realtime { doc = Net::HTTP.get(URI.parse(url)) }.to_f * 1000).round
    puts "Trial #{i}: actual_time: #{actual_time}ms"
    total += actual_time
  end
  puts "\nTotal time was #{(total / 1000)} seconds, for an average of #{(total / attempts)}ms"
end
